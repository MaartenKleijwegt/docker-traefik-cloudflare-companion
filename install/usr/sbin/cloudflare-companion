#!/usr/bin/python3

from __future__ import print_function
from datetime import datetime
from get_docker_secret import get_docker_secret
import CloudFlare
import docker
import os
import re

DEFAULT_TTL = os.environ.get('DEFAULT_TTL', "1")
SWARM_MODE = os.environ.get('SWARM_MODE', "FALSE")
REFRESH_ENTRIES = os.environ.get('REFRESH_ENTRIES', "FALSE")
TRAEFIK_VERSION = os.environ.get('TRAEFIK_VERSION', "2")
CONTAINER_LOG_LEVEL = os.environ.get('CONTAINER_LOG_LEVEL', "INFO")


def init_doms_from_env():
    RX_DOMS = re.compile('^DOMAIN[0-9]+$', re.IGNORECASE)

    doms = list()
    for k in os.environ:
        if not RX_DOMS.match(k):
            continue

        name = os.environ[k]
        try:
            dom = {
                'name': name,
                'proxied': os.environ.get("{}_PROXIED".format(k), "FALSE").upper() == "TRUE",
                'zone_id': os.environ["{}_ZONE_ID".format(k)],
                'ttl': os.environ.get("{}_TTL".format(k), DEFAULT_TTL),
                'target_domain': os.environ.get("{}_TARGET_DOMAIN".format(k), target_domain),
            }

            doms.append(dom)

        except KeyError as e:
            print("*** ERROR: {} is not set!".format(e))

    return doms


def point_domain(name, doms):
    for dom in doms:
        if name == dom['target_domain']:
            continue

        if name.find(dom['name']) >= 0:
            records = cf.zones.dns_records.get(dom['zone_id'], params={u'name': name})
            data = {
                u'type': u'CNAME',
                u'name': name,
                u'content': dom['target_domain'],
                u'ttl': dom['ttl'],
                u'proxied': dom['proxied']
            }
            if REFRESH_ENTRIES:
                try:
                    if len(records) == 0:
                        r = cf.zones.dns_records.post(dom['zone_id'], data=data)
                        print ("[info] Created new record:", name, "to point to", dom['target_domain'])
                    else:
                        for record in records:
                            cf.zones.dns_records.put(dom['zone_id'], record["id"], data=data)
                            print ("[info] Updated existing record:", name, "to point to", dom['target_domain'])
                except CloudFlare.exceptions.CloudFlareAPIError as e:
                    pass
            else:
                try:
                    r = cf.zones.dns_records.post(dom['zone_id'], data=data)
                    print("[info] Created new record:", name, "to point to", dom['target_domain'])

                except CloudFlare.exceptions.CloudFlareAPIError as e:
                    print('** %s - %d %s' % (name, e, e))


def check_container_t1(c, doms):
    if CONTAINER_LOG_LEVEL == "DEBUG":
        print("[debug] Called check_container_t1 for:", c)
    cont_id = c.attrs.get(u'Id')
    for prop in c.attrs.get(u'Config').get(u'Labels'):
        if re.match('traefik.*.frontend.rule', prop):
            value = c.attrs.get(u'Config').get(u'Labels').get(prop)
            if 'Host' in value:
                value = value.split("Host:")[1].strip()
                if CONTAINER_LOG_LEVEL == "DEBUG":
                    print("[debug] Container ID:", cont_id, "rule value:", value)
                if ',' in value:
                    for v in value.split(","):
                        print("[info] Found Container ID:", cont_id, "with Multi-Hostname", v)
                        point_domain(v, doms)
                else:
                    print("[info] Found Container ID:", cont_id, "with Hostname", value)
                    point_domain(value, doms)
            else:
                pass


def check_service_t1(s, doms):
    if CONTAINER_LOG_LEVEL == "DEBUG":
        print("[debug] Called check_service_t1 for:", s)
    cont_id = s
    s = client.services.get(s)
    for prop in s.attrs.get(u'Spec').get(u'TaskTemplate').get(u'ContainerSpec').get(u'Labels'):
        if re.match('traefik.*.frontend.rule', prop):
            value = s.attrs.get(u'Spec').get(u'TaskTemplate').get(u'ContainerSpec').get(u'Labels').get(prop)
            if 'Host' in value:
                value = value.split("Host:")[1].strip()
                if CONTAINER_LOG_LEVEL == "DEBUG":
                    print("[debug] Service ID:", cont_id, "rule value:", value)
                if ',' in value:
                    for v in value.split(","):
                        print("[info] Found Service ID:", cont_id, "with Multi-Hostname", v)
                        point_domain(v, doms)
                else:
                    print("[info] Found Service ID:", cont_id, "with Hostname", value)
                    point_domain(value, doms)
            else:
                pass


def check_container_t2(c, doms):
    if CONTAINER_LOG_LEVEL == "DEBUG":
        print("[debug] Called check_container_t2 for:", c)
    cont_id = c.attrs.get(u'Id')
    for prop in c.attrs.get(u'Config').get(u'Labels'):
        value = c.attrs.get(u'Config').get(u'Labels').get(prop)
        if re.match('traefik.*?\.rule', prop):
            if 'Host' in value:
                if CONTAINER_LOG_LEVEL == "DEBUG":
                    print("[debug] Container ID:", cont_id, "rule value:", value)
                extracted_domains = re.findall(r'Host.*?\(`(.*?)`\)', value)
                if CONTAINER_LOG_LEVEL == "DEBUG":
                    print("[debug] Container ID:", cont_id, "extracted domains from rule:", extracted_domains)
                if len(extracted_domains) > 1:
                    for v in extracted_domains:
                        print("[info] Found Container ID:", cont_id, "with Multi-Hostname", v)
                        point_domain(v, doms)
                elif len(extracted_domains) == 1:
                    print("[info] Found Container ID:", cont_id, "with Hostname", extracted_domains[0])
                    point_domain(extracted_domains[0], doms)
            else:
                pass


def check_service_t2(s, doms):
    if CONTAINER_LOG_LEVEL == "DEBUG":
        print("[debug] Called check_service_t2 for:", s)
    cont_id = s
    s = client.services.get(s)
    for prop in s.attrs.get(u'Spec').get(u'Labels'):
        value = s.attrs.get(u'Spec').get(u'Labels').get(prop)
        if re.match('traefik.*?\.rule', prop):
            if 'Host' in value:
                if CONTAINER_LOG_LEVEL == "DEBUG":
                    print("[debug] Service ID:", cont_id, "rule value:", value)
                extracted_domains = re.findall(r'Host.*?\(`(.*?)`\)', value)
                if CONTAINER_LOG_LEVEL == "DEBUG":
                    print("[debug] Service ID:", cont_id, "extracted domains from rule:", extracted_domains)
                if len(extracted_domains) > 1:
                    for v in extracted_domains:
                        print("[info] Found Service ID:", cont_id, "with Multi-Hostname", v)
                        point_domain(v, doms)
                elif len(extracted_domains) == 1:
                    print("[info] Found Service ID:", cont_id, "with Hostname", extracted_domains[0])
                    point_domain(extracted_domains[0], doms)
            else:
                pass


def init(doms):
    if CONTAINER_LOG_LEVEL == "DEBUG":
        print("[debug] Starting Initialization Routines")

    for c in client.containers.list():
        if CONTAINER_LOG_LEVEL == "DEBUG":
            print("[debug] Container List Discovery Loop")

        if TRAEFIK_VERSION == "1":
            check_container_t1(c, doms)
        elif TRAEFIK_VERSION == "2":
            check_container_t2(c, doms)

    if SWARM_MODE:
        if CONTAINER_LOG_LEVEL == "DEBUG":
            print("[debug] Service List Discovery Loop")
        for s in api.services():
            full_serv_id = s["ID"]
            short_serv_id = full_serv_id[:10]
            serv_id = "<Service: " + short_serv_id + ">"
            cont = str(api.containers(quiet=1, filters={'label': 'com.docker.swarm.service.id=' + full_serv_id}))
            full_cont_id = cont[9:-4]
            short_cont_id = full_cont_id[:10]
            cont_id = "<Container: " + short_cont_id + ">"
            if TRAEFIK_VERSION == "1":
                check_service_t1(full_serv_id, doms)
            elif TRAEFIK_VERSION == "2":
                check_service_t2(full_serv_id, doms)
            else:
                pass


try:

    # Check for uppercase docker secrets or env variables
    email = get_docker_secret('CF_EMAIL', autocast_name=False, getenv=True)
    token = get_docker_secret('CF_TOKEN', autocast_name=False, getenv=True)

    # Check for lowercase docker secrets
    if not email:
        email = get_docker_secret('CF_EMAIL', autocast_name=True, getenv=True)
    if not token:
        token = get_docker_secret('CF_TOKEN', autocast_name=True, getenv=True)

    target_domain = os.environ['TARGET_DOMAIN']
    domain = os.environ['DOMAIN1']

except KeyError as e:
    exit("ERROR: {} not defined".format(e))

if CONTAINER_LOG_LEVEL.lower() == "debug":
    CONTAINER_LOG_LEVEL = "DEBUG"

if REFRESH_ENTRIES.lower() == "true":
    REFRESH_ENTRIES = True
elif REFRESH_ENTRIES.lower() == "false":
    REFRESH_ENTRIES = False

if SWARM_MODE.lower() == "true":
    SWARM_MODE = True
elif SWARM_MODE.lower() == "false":
    SWARM_MODE = False

if CONTAINER_LOG_LEVEL == "DEBUG":
    print("[debug] Swarm Mode:", SWARM_MODE)
    print("[debug] Refresh Entries:", REFRESH_ENTRIES)
    print("[debug] Traefik Version:", TRAEFIK_VERSION)
    print("[debug] Default TTL:", DEFAULT_TTL)
    if not email:
        print("[debug] API Mode: Scoped")
        cf = CloudFlare.CloudFlare(debug=True, token=token)
    else:
        print("[debug] API Mode: Global")
        cf = CloudFlare.CloudFlare(debug=True, email=email, token=token)
else:
    if not email:
        cf = CloudFlare.CloudFlare(token=token)
    else:
        cf = CloudFlare.CloudFlare(email=email, token=token)

client = docker.from_env()

if SWARM_MODE:
    api = docker.APIClient()

doms = init_doms_from_env()

init(doms)

if CONTAINER_LOG_LEVEL == "DEBUG":
    print("[debug] Starting event watch routines")

t = datetime.now().strftime("%s")

if CONTAINER_LOG_LEVEL == "DEBUG":
    print("[debug] Time:", t)

for event in client.events(since=t, filters={'Type': 'service', 'Action': u'update', 'status': u'start'}, decode=True):

    if event.get(u'status') == u'start':
        try:
            if TRAEFIK_VERSION == "1":
                check_container_t1(client.containers.get(event.get(u'id')), doms)
                if SWARM_MODE:
                    check_service_t1(client.services.get(event.get(u'id')), doms)
            elif TRAEFIK_VERSION == "2":
                check_container_t2(client.containers.get(event.get(u'id')), doms)
                if SWARM_MODE:
                    check_service_t2(client.services.get(event.get(u'id')), doms)

        except docker.errors.NotFound as e:
            pass

    if SWARM_MODE:
        if event.get(u'Action') == u'update':
            try:
                if TRAEFIK_VERSION == "1":
                    node_id = event.get(u'Actor').get(u'ID')
                    if CONTAINER_LOG_LEVEL == "DEBUG":
                        print("[debug] Detected Update on node:", node_id)
                    check_service_t1(node_id, doms)
                elif TRAEFIK_VERSION == "2":
                    node_id = event.get(u'Actor').get(u'ID')
                    service_id = client.services.list()
                    if CONTAINER_LOG_LEVEL == "DEBUG":
                        print("[debug] Detected Update on node:", node_id)
                    check_service_t2(node_id, doms)

            except docker.errors.NotFound as e:
                pass
